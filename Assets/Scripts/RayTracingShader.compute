#pragma kernel CSMain


struct Sphere {
	float3 position;
	float radius;
	float3 albedo;
	float3 specular;
};

struct Ray {
	float3 origin;
	float3 direction;
	float3 energy;
	float3 color;
};

RWTexture2D<float4> Result;

Texture2D<float4> _SkyboxTexture;
SamplerState sampler_SkyboxTexture;
static const float PI = 3.14159265f;
static const float3 GroundColor = float3(0.3f, 0.3f, 0.3f);

RWStructuredBuffer<Sphere> spheres;
int bounces;
int samplesPerPixel;

float4x4 _CameraToWorld;
float4x4 _CameraInverseProjection;

float4 _DirectionalLight;
float3 _DirectionalLightColor;


Ray CreateRay(float3 origin, float3 direction) {
	Ray ray;
	ray.origin = origin;
	ray.direction = direction;
	ray.energy = float3(1.0f, 1.0f, 1.0f);
	ray.color = _DirectionalLightColor;
	return ray;
}

Ray CreateCameraRay(float2 uv) {
	float3 origin = mul(_CameraToWorld, float4(0.0f, 0.0f, 0.0f, 1.0f)).xyz;

	float3 direction = mul(_CameraInverseProjection, float4(uv, 0.0f, 1.0f)).xyz;

	direction = mul(_CameraToWorld, float4(direction, 0.0f)).xyz;
	direction = normalize(direction);

	return CreateRay(origin, direction);
}

struct RayHit {
	float3 position;
	float3 normal;
	float distance;
	float3 specular;
	float3 albedo;
};

RayHit CreateHit() {
	RayHit hit;
	hit.position = float3(0, 0, 0);
	hit.distance = 1.#INF;
	hit.normal = float3(0, 0, 0);
	hit.albedo = float3(0, 0, 0);
	hit.specular = float3(0, 0, 0);
	return hit;
}

void IntersectGroundPlane(inout Ray ray, inout RayHit bestHit) {
	float t = -ray.origin.y / ray.direction.y;

	if (t > 0 && t < bestHit.distance) {
		bestHit.distance = t;
		bestHit.position = ray.origin + t * ray.direction;
		bestHit.normal = float3(0.0f, 1.0f, 0.0f);
		bestHit.albedo = GroundColor;
		bestHit.specular = float3(0.8f, 0.8f, 0.8f);
		
		ray.color = (ray.color + GroundColor) / 2.0f;
	}
}

void IntersectSphere(inout Ray ray, inout RayHit bestHit, Sphere sphere) {
	float3 d = ray.origin - sphere.position;
	float p1 = -dot(ray.direction, d);
	float p2sqr = p1 * p1 - dot(d, d) + sphere.radius * sphere.radius;

	if (p2sqr < 0) {
		return;
	}

	float p2 = sqrt(p2sqr);
	float t = p1 - p2 > 0 ? p1 - p2 : p1 + p2;

	if (t > 0 && t < bestHit.distance) {
		bestHit.distance = t;
		bestHit.position = ray.origin + t * ray.direction;
		bestHit.normal = normalize(bestHit.position - sphere.position);
		bestHit.albedo = sphere.albedo;
		bestHit.specular = sphere.specular;
		
		ray.color = (ray.color + sphere.albedo) / 2.0f;
	}
}

RayHit Trace(Ray ray) {
	RayHit bestHit = CreateHit();

	IntersectGroundPlane(ray, bestHit);

	for (int i = 0; i < spheres.Length; i++) {
		IntersectSphere(ray, bestHit, spheres[i]);
	}

	return bestHit;
}

float3 Shade(inout Ray ray, RayHit hit) {
	if (hit.distance < 1.#INF) {		
		ray.origin = hit.position + hit.normal * 0.001f;
		ray.direction = reflect(ray.direction, hit.normal);
		ray.energy *= hit.specular;

		bool shadow = false;
		Ray shadowRay = CreateRay(hit.position + hit.normal * 0.001f, -1 * _DirectionalLight.xyz);
		RayHit shadowHit = Trace(shadowRay);
		if (shadowHit.distance != 1.#INF) {
			return float3(0, 0, 0);
		}
		
		return saturate(dot(hit.normal, _DirectionalLight.xyz) * -1) * (_DirectionalLight.w * 100) * hit.albedo * ray.color;
	}
	else {
		ray.energy = 0;

		float theta = acos(ray.direction.y) / -PI;
		float phi = atan2(ray.direction.x, -ray.direction.z) / -PI * 0.5f;
		return _SkyboxTexture.SampleLevel(sampler_SkyboxTexture, float2(phi, theta), 0).xyz * 0.5f;
	}
}

[numthreads(8, 8, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
	uint width;
	uint height;

	Result.GetDimensions(width, height);

	float sampleIndex = 0;

	Result[id.xy] = float4(0, 0, 0, 0);

	for (int s = 0; s < samplesPerPixel; s++) {
		// Transform pixel to [-1,1] range
		float2 uv = float2((id.xy + float2(sampleIndex, sampleIndex)) / float2(width, height) * 2.0f - 1.0f);

		Ray ray = CreateCameraRay(uv);

		float3 result = float3(0, 0, 0);
		for (int i = 0; i < bounces; i++) {
			RayHit hit = Trace(ray);
			result += ray.energy * Shade(ray, hit);

			if (ray.energy.x + ray.energy.y + ray.energy.z <= 0) break;
		}

		Result[id.xy] += float4(result / samplesPerPixel, 1);

		sampleIndex += 1.0f / samplesPerPixel;
	}
}
